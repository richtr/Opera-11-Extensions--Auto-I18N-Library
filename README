 Auto Internationalization (I18N) Library for Opera Extensions
 -------------------------------------------------------------- 
 --------------------------------------------------------------
 
 The I18N library for Opera 11+ extension developers provides a convenient
 way for developers to include multi-language support within their extensions without 
 having to include those translations manually.
 
 This library, available at opera.extensions.i18n, utilizes the Google Translate API and 
 client-side caching for developers to quickly and easily add I18N support to their 
 extensions.
 
 This library is distributed under the Creative Commons Sharealike License: 
 		
 		http://creativecommons.org/licenses/by-sa/2.5/
 
 Follow these simple instructions to config and use this library from
 your Popup and/or Injected Script files:
 
 --------------------------
 Configuration
 --------------------------
 
 1. Add the following line to your configuration document (/config.xml):
 
 		<access origin="https://ajax.googleapis.com"/>
 
 2. Create your reference strings in /messages.js in the language of your choice. You can add 
    placeholders as <string/> in to which you can dynamically inject content at runtime as 
    required (see examples below).
 
 Instructions for then using this library within your background process, popup process or 
 injected script processes are included below.  
 
 ---------------
 General Usage:
 ---------------
 
 1. Include the following lines in your Background process (typically /index.html):
 
 		<script type="text/javascript" src="messages.js"></script>
 		<script type="text/javascript" src="i18n_lib.js"></script>
 
 2. Copy and paste the /snippet.js file once at the *top* of each Popup or Injected Script 
    target file(s).
 
 3. Access your localized messages by their *id* as follows within Javascript:
 
 		opera.extension.i18n.getMessage('welcomeMessage');
 		opera.extension.i18n.getMessage('helpButtonString');
		// etc...
		
	You can also replace <string/> placeholders in your messages at runtime as follows:
	
    	opera.extension.i18n.getMessage('somemessage', [ "string1", "string2" ]);
    	opera.extension.i18n.getMessage('sign_in_required_message', [ 
    	    opera.extension.i18n.getMessage['sign_in_message'] 
    	]);
    	// etc...
		
 
 That's all you need for complete auto-localization of your extension.
 
 ------------------------
 On-demand Translations:
 ------------------------
 
 In addition to localizing your strings defined in your messages.js, this library can also 
 provide on-demand localization/translation for any messages you wish.
 
 To use the on-demand localization feature, follow these instructions:
 
 1. Once again, make sure that i18n_lib.js is included in your Background process page 
    (typically in index.html).
 
 		<script type="text/javascript" src="i18n_lib.js"></script>
 
 2. Copy and paste the /snippet.js file once at the *top* of each Popup or Injected Script 
    target file(s).
 
 3. Perform on-demand translation/localization with the following code:
 
 		opera.extension.i18n.localize(
 			{
 				'mystring1': {
 					'message': 'string 1 to translate' 
 				},
 				'mystring2': {
 					'message': 'string 2 to translate' 
 				},
 				'mystring3': {
 					'message': 'string 3 to translate' 
 				},
 				// include as many strings here as you like...
 				'somestring': {
 					'message': '...etc...' 
 				}
 			},
 			// Translation callback function:
 			function( toLanguage, translatedStrings ) {
				opera.postError('Translated messages to ' + toLanguage);
				// Process resulting translations here...
				// e.g. opera.extension.i18n.getMessage['mystring1'];
 			}
 		);
 
 4. Use the callback function to obtain the strings translated to the user's locale.
 	
 	Alternatively use the standard I18N methods to obtain the translated messages:
    
    	opera.extension.i18n.getMessage('mystring1');
    	opera.extension.i18n.getMessage('somestring');
    	// ...etc...
    	
    You can also replace <string/> placeholders in your messages at runtime as follows:
	
    	opera.extension.i18n.getMessage('somemessage', [ "string1", "string2" ]);
    	opera.extension.i18n.getMessage('sign_in_required_message', [ 
    	    opera.extension.i18n.getMessage['sign_in_message'] 
    	]);
    	// etc...
    
    
** NOTE******************************************************************************
**                                                                                 **
** IT IS QUICKER TO USE THE FIRST METHOD TO OBTAIN TRANSLATIONS. THE SECOND METHOD **
** SENDS AN INDIVIDUAL TRANSLATION REQUEST TO THE SERVERS EACH TIME THIS FUNCTION  ** 
** IS CALLED. WHERE POSSIBLE YOU SHOULD PRE-DEFINE YOUR MESSAGES IN messages.js.   **
**                                                                                 **
*************************************************************************************
 
--------
Support
--------
 
 Any problems, questions or feedback please visit: 
 
 		http://my.opera.com/richtr
 